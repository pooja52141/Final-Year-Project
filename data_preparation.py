# -*- coding: utf-8 -*-
"""Data Preparation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GdSRE7e4e78TYXXwSvp4gRTyphMLM9V6
"""

from google.colab import drive
from google.colab.patches import cv2_imshow
drive.mount('/content/drive')

!pip install audio-extract
from audio_extract import extract_audio
import os
!pip install moviepy
from moviepy.editor import VideoFileClip
import librosa.display
import numpy as np
import moviepy.editor as mp
import matplotlib.pyplot as plt
import shutil

"""### **Extract Mel Spectrograms**"""

def extract_mel_spectrogram(output_audio_path, output_image_path):
    y, sr = librosa.load(output_audio_path)
    # Compute the Mel spectrogram
    mel_spec = librosa.feature.melspectrogram(y=y, sr=sr, n_mels=128, fmax=sr//2)
    mel_spec_db = librosa.power_to_db(mel_spec, ref=np.max)
    # Plot the Mel spectrogram
    plt.figure(figsize=(10, 4))
    librosa.display.specshow(mel_spec_db, x_axis='time', y_axis='mel', sr=sr, fmax=sr//2)
    plt.colorbar(format='%+2.0f dB')
    plt.title('Mel spectrogram')
    plt.tight_layout()
    # Save the image
    plt.savefig(output_image_path)

def extract_audio(path, output_path_audio, output_path_mel_spectrogram, output_path_video, real_or_fake, count):
    # Change the directory
    os.chdir(path)

    # iterate through all file
    for file in os.listdir():
        # Check whether file is in text format or not
        if file.endswith(".mp4"):
            #extracting audio
            video_file_path = f"{path}/{file}"
            output_video_path = output_path_video + "/" + real_or_fake + "_" + str(count) + ".mp4"
            print("Copying video to:", output_video_path)
            shutil.copy(video_file_path, output_video_path)
            # Load the video clip
            video_clip = VideoFileClip(video_file_path)

            # Extract the audio from the video
            audio_clip = video_clip.audio

            # Define the output audio file path (e.g., 'output_audio.wav' or 'output_audio.mp3')
            # video_id = file.split(".mp4")[0]
            output_audio_path = output_path_audio + "/" + real_or_fake + "_" + str(count) + ".mp3"

            # Write the extracted audio to a file
            audio_clip.write_audiofile(output_audio_path, codec='mp3')  # You can use other audio codecs like 'wav' if needed

            # Close the audio and video clips
            audio_clip.close()
            video_clip.close()

            print("Audio Saved to:", output_audio_path)

            output_mel_spectrogram_path = output_path_mel_spectrogram + "/" + real_or_fake + "_" + str(count) + "_melspectrogram.png"
            extract_mel_spectrogram(output_audio_path, output_mel_spectrogram_path)
            print("Melspectrogram Saved to:", output_mel_spectrogram_path)

            count += 1
        elif file.endswith(".txt"):
            pass
        else:
          folder_path = f"{path}/{file}"
          count = extract_audio(folder_path, output_path_audio, output_path_mel_spectrogram, output_path_video, real_or_fake, count)
    return count

# Folder Path
path_African_fvfa_men = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/FakeVideo-FakeAudio (1)/African (1)/men (1)"
path_African_fvfa_women = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/FakeVideo-FakeAudio (1)/African (1)/women (1)"
path_Asian_East_fvfa_men = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/FakeVideo-FakeAudio (1)/Asian (East) (1)/men (1)"
path_Asian_East_fvfa_women = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/FakeVideo-FakeAudio (1)/Asian (East) (1)/women (1)"
path_Asian_South_fvfa_men = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/FakeVideo-FakeAudio (1)/Asian (South) (1)/men (1)"
path_Asian_South_fvfa_women = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/FakeVideo-FakeAudio (1)/Asian (South) (1)/women (1)"
path_Caucasian_American_fvfa_men = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/FakeVideo-FakeAudio (1)/Caucasian (American) (1)/men (1)"
path_Caucasian_American_fvfa_women = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/FakeVideo-FakeAudio (1)/Caucasian (American) (1)/women (1)"
path_Caucasian_European_fvfa_men = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/FakeVideo-FakeAudio (1)/Caucasian (European) (1)/men (1)"
path_Caucasian_European_fvfa_women = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/FakeVideo-FakeAudio (1)/Caucasian (European) (1)/women (1)"

path_African_rvfa_men = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/RealVideo-FakeAudio (1)/African (1)/men (1)"
path_African_rvfa_women = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/RealVideo-FakeAudio (1)/African (1)/women (1)"
path_Asian_East_rvfa_men = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/RealVideo-FakeAudio (1)/Asian (East) (1)/men (1)"
path_Asian_East_rvfa_women = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/RealVideo-FakeAudio (1)/Asian (East) (1)/women (1)"
path_Asian_South_rvfa_men = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/RealVideo-FakeAudio (1)/Asian (South) (1)/men (1)"
path_Asian_South_rvfa_women = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/RealVideo-FakeAudio (1)/Asian (South) (1)/women (1)"
path_Caucasian_American_rvfa_men = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/RealVideo-FakeAudio (1)/Caucasian (American) (1)/men (1)"
path_Caucasian_American_rvfa_women = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/RealVideo-FakeAudio (1)/Caucasian (American) (1)/women (1)"
path_Caucasian_European_rvfa_men = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/RealVideo-FakeAudio (1)/Caucasian (European) (1)/men (1)"
path_Caucasian_European_rvfa_women = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/RealVideo-FakeAudio (1)/Caucasian (European) (1)/women (1)"

path_African_rvra_men = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/RealVideo-RealAudio (1)/African (1)/men (1)"
path_African_rvra_women = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/RealVideo-RealAudio (1)/African (1)/women (1)"
path_Asian_East_rvra_men = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/RealVideo-RealAudio (1)/Asian (East) (1)/men (1)"
path_Asian_East_rvra_women = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/RealVideo-RealAudio (1)/Asian (East) (1)/women (1)"
path_Asian_South_rvra_men = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/RealVideo-RealAudio (1)/Asian (South) (1)/men (1)"
path_Asian_South_rvra_women = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/RealVideo-RealAudio (1)/Asian (South) (1)/women (1)"
path_Caucasian_American_rvra_men = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/RealVideo-RealAudio (1)/Caucasian (American) (1)/men (1)"
path_Caucasian_American_rvra_women = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/RealVideo-RealAudio (1)/Caucasian (American) (1)/women (1)"
path_Caucasian_European_rvra_men = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/RealVideo-RealAudio (1)/Caucasian (European) (1)/men (1)"
path_Caucasian_European_rvra_women = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/RealVideo-RealAudio (1)/Caucasian (European) (1)/women (1)"

path_African_fvra_men = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/FakeVideo-RealAudio (1)/African (1)/men (1)"
path_African_fvra_women = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/FakeVideo-RealAudio (1)/African (1)/women (1)"
path_Asian_East_fvra_men = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/FakeVideo-RealAudio (1)/Asian (East) (1)/men (1)"
path_Asian_East_fvra_women = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/FakeVideo-RealAudio (1)/Asian (East) (1)/women (1)"
path_Asian_South_fvra_men = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/FakeVideo-RealAudio (1)/Asian (South) (1)/men (1)"
path_Asian_South_fvra_women = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/FakeVideo-RealAudio (1)/Asian (South) (1)/women (1)"
path_Caucasian_American_fvra_men = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/FakeVideo-RealAudio (1)/Caucasian (American) (1)/men (1)"
path_Caucasian_American_fvra_women = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/FakeVideo-RealAudio (1)/Caucasian (American) (1)/women (1)"
path_Caucasian_European_fvra_men = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/FakeVideo-RealAudio (1)/Caucasian (European) (1)/men (1)"
path_Caucasian_European_fvra_women = "/content/drive/Shareddrives/FYP/FakeAVCeleb_v1 (1).2/FakeAVCeleb_v1 (1).2/FakeVideo-RealAudio (1)/Caucasian (European) (1)/women (1)"

##--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

output_path_fake = "/content/drive/MyDrive/audio_dataset/fake"
output_path_real = "/content/drive/MyDrive/audio_dataset/real"

output_mel_fake = "/content/drive/MyDrive/audio_dataset/melspectrogram/fake"
output_mel_real = "/content/drive/MyDrive/audio_dataset/melspectrogram/real"

##---------------------------------------------------AUDIO OUTPUT PATH-----------------------------------------------------------------------------------------------------------------------------------

output_audio_African_fvfa_men = "/content/drive/Shareddrives/FYP/dataset/audio/fake_video-fake_audio/African/men"
output_audio_African_fvfa_women = "/content/drive/Shareddrives/FYP/dataset/audio/fake_video-fake_audio/African/women"
output_audio_Asian_East_fvfa_men = "/content/drive/Shareddrives/FYP/dataset/audio/fake_video-fake_audio/Asian (East)/men"
output_audio_Asian_East_fvfa_women = "/content/drive/Shareddrives/FYP/dataset/audio/fake_video-fake_audio/Asian (East)/women"
output_audio_Asian_South_fvfa_men = "/content/drive/Shareddrives/FYP/dataset/audio/fake_video-fake_audio/Asian (South)/men"
output_audio_Asian_South_fvfa_women = "/content/drive/Shareddrives/FYP/dataset/audio/fake_video-fake_audio/Asian (South)/women"
output_audio_Caucasian_American_fvfa_men = "/content/drive/Shareddrives/FYP/dataset/audio/fake_video-fake_audio/Caucasian (American)/men"
output_audio_Caucasian_American_fvfa_women = "/content/drive/Shareddrives/FYP/dataset/audio/fake_video-fake_audio/Caucasian (American)/women"
output_audio_Caucasian_European_fvfa_men = "/content/drive/Shareddrives/FYP/dataset/audio/fake_video-fake_audio/Caucasian (European)/men"
output_audio_Caucasian_European_fvfa_women = "/content/drive/Shareddrives/FYP/dataset/audio/fake_video-fake_audio/Caucasian (European)/women"

output_audio_African_rvfa_men = "/content/drive/Shareddrives/FYP/dataset/audio/real_video-fake_audio/African/men"
output_audio_African_rvfa_women = "/content/drive/Shareddrives/FYP/dataset/audio/real_video-fake_audio/African/women"
output_audio_Asian_East_rvfa_men = "/content/drive/Shareddrives/FYP/dataset/audio/real_video-fake_audio/Asian (East)/men"
output_audio_Asian_East_rvfa_women = "/content/drive/Shareddrives/FYP/dataset/audio/real_video-fake_audio/Asian (East)/women"
output_audio_Asian_South_rvfa_men = "/content/drive/Shareddrives/FYP/dataset/audio/real_video-fake_audio/Asian (South)/men"
output_audio_Asian_South_rvfa_women = "/content/drive/Shareddrives/FYP/dataset/audio/real_video-fake_audio/Asian (South)/women"
output_audio_Caucasian_American_rvfa_men = "/content/drive/Shareddrives/FYP/dataset/audio/real_video-fake_audio/Caucasian (American)/men"
output_audio_Caucasian_American_rvfa_women = "/content/drive/Shareddrives/FYP/dataset/audio/real_video-fake_audio/Caucasian (American)/women"
output_audio_Caucasian_European_rvfa_men = "/content/drive/Shareddrives/FYP/dataset/audio/real_video-fake_audio/Caucasian (European)/men"
output_audio_Caucasian_European_rvfa_women = "/content/drive/Shareddrives/FYP/dataset/audio/real_video-fake_audio/Caucasian (European)/women"

output_audio_African_rvra_men = "/content/drive/Shareddrives/FYP/dataset/audio/real_video-real_audio/African/men"
output_audio_African_rvra_women = "/content/drive/Shareddrives/FYP/dataset/audio/real_video-real_audio/African/women"
output_audio_Asian_East_rvra_men = "/content/drive/Shareddrives/FYP/dataset/audio/real_video-real_audio/Asian (East)/men"
output_audio_Asian_East_rvra_women = "/content/drive/Shareddrives/FYP/dataset/audio/real_video-real_audio/Asian (East)/women"
output_audio_Asian_South_rvra_men = "/content/drive/Shareddrives/FYP/dataset/audio/real_video-real_audio/Asian (South)/men"
output_audio_Asian_South_rvra_women = "/content/drive/Shareddrives/FYP/dataset/audio/real_video-real_audio/Asian (South)/women"
output_audio_Caucasian_American_rvra_men = "/content/drive/Shareddrives/FYP/dataset/audio/real_video-real_audio/Caucasian (American)/men"
output_audio_Caucasian_American_rvra_women = "/content/drive/Shareddrives/FYP/dataset/audio/real_video-real_audio/Caucasian (American)/women"
output_audio_Caucasian_European_rvra_men = "/content/drive/Shareddrives/FYP/dataset/audio/real_video-real_audio/Caucasian (European)/men"
output_audio_Caucasian_European_rvra_women = "/content/drive/Shareddrives/FYP/dataset/audio/real_video-real_audio/Caucasian (European)/women"

output_audio_African_fvra_men = "/content/drive/Shareddrives/FYP/dataset/audio/fake_video-real_audio/African/men"
output_audio_African_fvra_women = "/content/drive/Shareddrives/FYP/dataset/audio/fake_video-real_audio/African/women"
output_audio_Asian_East_fvra_men = "/content/drive/Shareddrives/FYP/dataset/audio/fake_video-real_audio/Asian (East)/men"
output_audio_Asian_East_fvra_women = "/content/drive/Shareddrives/FYP/dataset/audio/fake_video-real_audio/Asian (East)/women"
output_audio_Asian_South_fvra_men = "/content/drive/Shareddrives/FYP/dataset/audio/fake_video-real_audio/Asian (South)/men"
output_audio_Asian_South_fvra_women = "/content/drive/Shareddrives/FYP/dataset/audio/fake_video-real_audio/Asian (South)/women"
output_audio_Caucasian_American_fvra_men = "/content/drive/Shareddrives/FYP/dataset/audio/fake_video-real_audio/Caucasian (American)/men"
output_audio_Caucasian_American_fvra_women = "/content/drive/Shareddrives/FYP/dataset/audio/fake_video-real_audio/Caucasian (American)/women"
output_audio_Caucasian_European_fvra_men = "/content/drive/Shareddrives/FYP/dataset/audio/fake_video-real_audio/Caucasian (European)/men"
output_audio_Caucasian_European_fvra_women = "/content/drive/Shareddrives/FYP/dataset/audio/fake_video-real_audio/Caucasian (European)/women"

##---------------------------------------------------------------MEL SPECTROGRAM OUTPUT PATH-----------------------------------------------------------------------------------------------------------------------

output_mel_spectrogram_African_fvfa_men = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/fake_video-fake_audio/African/men"
output_mel_spectrogram_African_fvfa_women = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/fake_video-fake_audio/African/women"
output_mel_spectrogram_Asian_East_fvfa_men = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/fake_video-fake_audio/Asian (East)/men"
output_mel_spectrogram_Asian_East_fvfa_women = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/fake_video-fake_audio/Asian (East)/women"
output_mel_spectrogram_Asian_South_fvfa_men = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/fake_video-fake_audio/Asian (South)/men"
output_mel_spectrogram_Asian_South_fvfa_women = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/fake_video-fake_audio/Asian (South)/women"
output_mel_spectrogram_Caucasian_American_fvfa_men = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/fake_video-fake_audio/Caucasian (American)/men"
output_mel_spectrogram_Caucasian_American_fvfa_women = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/fake_video-fake_audio/Caucasian (American)/women"
output_mel_spectrogram_Caucasian_European_fvfa_men = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/fake_video-fake_audio/Caucasian (European)/men"
output_mel_spectrogram_Caucasian_European_fvfa_women = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/fake_video-fake_audio/Caucasian (European)/women"

output_mel_spectrogram_African_rvfa_men = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/real_video-fake_audio/African/men"
output_mel_spectrogram_African_rvfa_women = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/real_video-fake_audio/African/women"
output_mel_spectrogram_Asian_East_rvfa_men = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/real_video-fake_audio/Asian (East)/men"
output_mel_spectrogram_Asian_East_rvfa_women = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/real_video-fake_audio/Asian (East)/women"
output_mel_spectrogram_Asian_South_rvfa_men = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/real_video-fake_audio/Asian (South)/men"
output_mel_spectrogram_Asian_South_rvfa_women = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/real_video-fake_audio/Asian (South)/women"
output_mel_spectrogram_Caucasian_American_rvfa_men = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/real_video-fake_audio/Caucasian (American)/men"
output_mel_spectrogram_Caucasian_American_rvfa_women = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/real_video-fake_audio/Caucasian (American)/women"
output_mel_spectrogram_Caucasian_European_rvfa_men = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/real_video-fake_audio/Caucasian (European)/men"
output_mel_spectrogram_Caucasian_European_rvfa_women = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/real_video-fake_audio/Caucasian (European)/women"

output_mel_spectrogram_African_rvra_men = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/real_video-real_audio/African/men"
output_mel_spectrogram_African_rvra_women = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/real_video-real_audio/African/women"
output_mel_spectrogram_Asian_East_rvra_men = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/real_video-real_audio/Asian (East)/men"
output_mel_spectrogram_Asian_East_rvra_women = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/real_video-real_audio/Asian (East)/women"
output_mel_spectrogram_Asian_South_rvra_men = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/real_video-real_audio/Asian (South)/men"
output_mel_spectrogram_Asian_South_rvra_women = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/real_video-real_audio/Asian (South)/women"
output_mel_spectrogram_Caucasian_American_rvra_men = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/real_video-real_audio/Caucasian (American)/men"
output_mel_spectrogram_Caucasian_American_rvra_women = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/real_video-real_audio/Caucasian (American)/women"
output_mel_spectrogram_Caucasian_European_rvra_men = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/real_video-real_audio/Caucasian (European)/men"
output_mel_spectrogram_Caucasian_European_rvra_women = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/real_video-real_audio/Caucasian (European)/women"

output_mel_spectrogram_African_fvra_men = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/fake_video-real_audio/African/men"
output_mel_spectrogram_African_fvra_women = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/fake_video-real_audio/African/women"
output_mel_spectrogram_Asian_East_fvra_men = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/fake_video-real_audio/Asian (East)/men"
output_mel_spectrogram_Asian_East_fvra_women = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/fake_video-real_audio/Asian (East)/women"
output_mel_spectrogram_Asian_South_fvra_men = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/fake_video-real_audio/Asian (South)/men"
output_mel_spectrogram_Asian_South_fvra_women = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/fake_video-real_audio/Asian (South)/women"
output_mel_spectrogram_Caucasian_American_fvra_men = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/fake_video-real_audio/Caucasian (American)/men"
output_mel_spectrogram_Caucasian_American_fvra_women = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/fake_video-real_audio/Caucasian (American)/women"
output_mel_spectrogram_Caucasian_European_fvra_men = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/fake_video-real_audio/Caucasian (European)/men"
output_mel_spectrogram_Caucasian_European_fvra_women = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/fake_video-real_audio/Caucasian (European)/women"

##-----------------------------------------------VIDEO OUTPUT PATH------------------------------------------------------------------------------------------------------------

output_video_African_fvfa_men = "/content/drive/Shareddrives/FYP/dataset/video/fake_video-fake_audio/African/men"
output_video_African_fvfa_women = "/content/drive/Shareddrives/FYP/dataset/video/fake_video-fake_audio/African/women"
output_video_Asian_East_fvfa_men = "/content/drive/Shareddrives/FYP/dataset/video/fake_video-fake_audio/Asian (East)/men"
output_video_Asian_East_fvfa_women = "/content/drive/Shareddrives/FYP/dataset/video/fake_video-fake_audio/Asian (East)/women"
output_video_Asian_South_fvfa_men = "/content/drive/Shareddrives/FYP/dataset/video/fake_video-fake_audio/Asian (South)/men"
output_video_Asian_South_fvfa_women = "/content/drive/Shareddrives/FYP/dataset/video/fake_video-fake_audio/Asian (South)/women"
output_video_Caucasian_American_fvfa_men = "/content/drive/Shareddrives/FYP/dataset/video/fake_video-fake_audio/Caucasian (American)/men"
output_video_Caucasian_American_fvfa_women = "/content/drive/Shareddrives/FYP/dataset/video/fake_video-fake_audio/Caucasian (American)/women"
output_video_Caucasian_European_fvfa_men = "/content/drive/Shareddrives/FYP/dataset/video/fake_video-fake_audio/Caucasian (European)/men"
output_video_Caucasian_European_fvfa_women = "/content/drive/Shareddrives/FYP/dataset/video/fake_video-fake_audio/Caucasian (European)/women"

output_video_African_rvfa_men = "/content/drive/Shareddrives/FYP/dataset/video/real_video-fake_audio/African/men"
output_video_African_rvfa_women = "/content/drive/Shareddrives/FYP/dataset/video/real_video-fake_audio/African/women"
output_video_Asian_East_rvfa_men = "/content/drive/Shareddrives/FYP/dataset/video/real_video-fake_audio/Asian (East)/men"
output_video_Asian_East_rvfa_women = "/content/drive/Shareddrives/FYP/dataset/video/real_video-fake_audio/Asian (East)/women"
output_video_Asian_South_rvfa_men = "/content/drive/Shareddrives/FYP/dataset/video/real_video-fake_audio/Asian (South)/men"
output_video_Asian_South_rvfa_women = "/content/drive/Shareddrives/FYP/dataset/video/real_video-fake_audio/Asian (South)/women"
output_video_Caucasian_American_rvfa_men = "/content/drive/Shareddrives/FYP/dataset/video/real_video-fake_audio/Caucasian (American)/men"
output_video_Caucasian_American_rvfa_women = "/content/drive/Shareddrives/FYP/dataset/video/real_video-fake_audio/Caucasian (American)/women"
output_video_Caucasian_European_rvfa_men = "/content/drive/Shareddrives/FYP/dataset/video/real_video-fake_audio/Caucasian (European)/men"
output_video_Caucasian_European_rvfa_women = "/content/drive/Shareddrives/FYP/dataset/video/real_video-fake_audio/Caucasian (European)/women"

output_video_African_rvra_men = "/content/drive/Shareddrives/FYP/dataset/video/real_video-real_audio/African/men"
output_video_African_rvra_women = "/content/drive/Shareddrives/FYP/dataset/video/real_video-real_audio/African/women"
output_video_Asian_East_rvra_men = "/content/drive/Shareddrives/FYP/dataset/video/real_video-real_audio/Asian (East)/men"
output_video_Asian_East_rvra_women = "/content/drive/Shareddrives/FYP/dataset/video/real_video-real_audio/Asian (East)/women"
output_video_Asian_South_rvra_men = "/content/drive/Shareddrives/FYP/dataset/video/real_video-real_audio/Asian (South)/men"
output_video_Asian_South_rvra_women = "/content/drive/Shareddrives/FYP/dataset/video/real_video-real_audio/Asian (South)/women"
output_video_Caucasian_American_rvra_men = "/content/drive/Shareddrives/FYP/dataset/video/real_video-real_audio/Caucasian (American)/men"
output_video_Caucasian_American_rvra_women = "/content/drive/Shareddrives/FYP/dataset/video/real_video-real_audio/Caucasian (American)/women"
output_video_Caucasian_European_rvra_men = "/content/drive/Shareddrives/FYP/dataset/video/real_video-real_audio/Caucasian (European)/men"
output_video_Caucasian_European_rvra_women = "/content/drive/Shareddrives/FYP/dataset/video/real_video-real_audio/Caucasian (European)/women"

output_video_African_fvra_men = "/content/drive/Shareddrives/FYP/dataset/video/fake_video-real_audio/African/men"
output_video_African_fvra_women = "/content/drive/Shareddrives/FYP/dataset/video/fake_video-real_audio/African/women"
output_video_Asian_East_fvra_men = "/content/drive/Shareddrives/FYP/dataset/video/fake_video-real_audio/Asian (East)/men"
output_video_Asian_East_fvra_women = "/content/drive/Shareddrives/FYP/dataset/video/fake_video-real_audio/Asian (East)/women"
output_video_Asian_South_fvra_men = "/content/drive/Shareddrives/FYP/dataset/video/fake_video-real_audio/Asian (South)/men"
output_video_Asian_South_fvra_women = "/content/drive/Shareddrives/FYP/dataset/video/fake_video-real_audio/Asian (South)/women"
output_video_Caucasian_American_fvra_men = "/content/drive/Shareddrives/FYP/dataset/video/fake_video-real_audio/Caucasian (American)/men"
output_video_Caucasian_American_fvra_women = "/content/drive/Shareddrives/FYP/dataset/video/fake_video-real_audio/Caucasian (American)/women"
output_video_Caucasian_European_fvra_men = "/content/drive/Shareddrives/FYP/dataset/video/fake_video-real_audio/Caucasian (European)/men"
output_video_Caucasian_European_fvra_women = "/content/drive/Shareddrives/FYP/dataset/video/fake_video-real_audio/Caucasian (European)/women"

##----------------------------------------------------OUTPUT NAMES-----------------------------------------------------------------------------------

fvfa_African_men = "fvfa_African_men"
fvfa_African_women = "fvfa_African_women"
fvfa_Asian_East_men = "fvfa_Asian_East_men"
fvfa_Asian_East_women = "fvfa_Asian_East_women"
fvfa_Asian_South_men = "fvfa_Asian_South_men"
fvfa_Asian_South_women = "fvfa_Asian_South_women"
fvfa_Caucasian_American_men = "fvfa_Caucasian_American_men"
fvfa_Caucasian_American_women = "fvfa_Caucasian_American_women"
fvfa_Caucasian_European_men = "fvfa_Caucasian_European_men"
fvfa_Caucasian_European_women = "fvfa_Caucasian_European_women"

rvfa_African_men = "rvfa_African_men"
rvfa_African_women = "rvfa_African_women"
rvfa_Asian_East_men = "rvfa_Asian_East_men"
rvfa_Asian_East_women = "rvfa_Asian_East_women"
rvfa_Asian_South_men = "rvfa_Asian_South_men"
rvfa_Asian_South_women = "rvfa_Asian_South_women"
rvfa_Caucasian_American_men = "rvfa_Caucasian_American_men"
rvfa_Caucasian_American_women = "rvfa_Caucasian_American_women"
rvfa_Caucasian_European_men = "rvfa_Caucasian_European_men"
rvfa_Caucasian_European_women = "rvfa_Caucasian_European_women"

rvra_African_men = "rvra_African_men"
rvra_African_women = "rvra_African_women"
rvra_Asian_East_men = "rvra_Asian_East_men"
rvra_Asian_East_women = "rvra_Asian_East_women"
rvra_Asian_South_men = "rvra_Asian_South_men"
rvra_Asian_South_women = "rvra_Asian_South_women"
rvra_Caucasian_American_men = "rvra_Caucasian_American_men"
rvra_Caucasian_American_women = "rvra_Caucasian_American_women"
rvra_Caucasian_European_men = "rvra_Caucasian_European_men"
rvra_Caucasian_European_women = "rvra_Caucasian_European_women"

fvra_African_men = "fvra_African_men"
fvra_African_women = "fvra_African_women"
fvra_Asian_East_men = "fvra_Asian_East_men"
fvra_Asian_East_women = "fvra_Asian_East_women"
fvra_Asian_South_men = "fvra_Asian_South_men"
fvra_Asian_South_women = "fvra_Asian_South_women"
fvra_Caucasian_American_men = "fvra_Caucasian_American_men"
fvra_Caucasian_American_women = "fvra_Caucasian_American_women"
fvra_Caucasian_European_men = "fvra_Caucasian_European_men"
fvra_Caucasian_European_women = "fvra_Caucasian_European_women"

"""### **Extracting and Moving**

## **Fake Video - Fake Audio**
"""

count = 0
count = extract_audio(path_African_fvfa_men, output_audio_African_fvfa_men, output_mel_spectrogram_African_fvfa_men, output_video_African_fvfa_men, fvfa_African_men, count)
print(count)

count = 0
count = extract_audio(path_African_fvfa_women, output_audio_African_fvfa_women, output_mel_spectrogram_African_fvfa_women, output_video_African_fvfa_women, fvfa_African_women, count)
print(count)

count = 0
count = extract_audio(path_Asian_East_fvfa_men, output_audio_Asian_East_fvfa_men, output_mel_spectrogram_Asian_East_fvfa_men, output_video_Asian_East_fvfa_men, fvfa_Asian_East_men, count)
print(count)

count = 0
count = extract_audio(path_Asian_East_fvfa_women, output_audio_Asian_East_fvfa_women, output_mel_spectrogram_Asian_East_fvfa_women, output_video_Asian_East_fvfa_women, fvfa_Asian_East_women, count)
print(count)

count = 0
count = extract_audio(path_Asian_South_fvfa_men, output_audio_Asian_South_fvfa_men, output_mel_spectrogram_Asian_South_fvfa_men, output_video_Asian_South_fvfa_men, fvfa_Asian_South_men, count)
print(count)

count = 0
count = extract_audio(path_Asian_South_fvfa_women, output_audio_Asian_South_fvfa_women, output_mel_spectrogram_Asian_South_fvfa_women, output_video_Asian_South_fvfa_women, fvfa_Asian_South_women, count)
print(count)

count = 0
count = extract_audio(path_Caucasian_American_fvfa_men, output_audio_Caucasian_American_fvfa_men, output_mel_spectrogram_Caucasian_American_fvfa_men, output_video_Caucasian_American_fvfa_men, fvfa_Caucasian_American_men, count)
print(count)

count = 0
count = extract_audio(path_Caucasian_American_fvfa_women, output_audio_Caucasian_American_fvfa_women, output_mel_spectrogram_Caucasian_American_fvfa_women, output_video_Caucasian_American_fvfa_women, fvfa_Caucasian_American_women, count)
print(count)

count = 0
count = extract_audio(path_Caucasian_European_fvfa_men, output_audio_Caucasian_European_fvfa_men, output_mel_spectrogram_Caucasian_European_fvfa_men, output_video_Caucasian_European_fvfa_men, fvfa_Caucasian_European_men, count)
print(count)

count = 0
count = extract_audio(path_Caucasian_European_fvfa_women, output_audio_Caucasian_European_fvfa_women, output_mel_spectrogram_Caucasian_European_fvfa_women, output_video_Caucasian_European_fvfa_women, fvfa_Caucasian_European_women, count)
print(count)

"""## **Real Video - Fake Audio**"""

count = 0
count = extract_audio(path_African_rvfa_men, output_audio_African_rvfa_men, output_mel_spectrogram_African_rvfa_men, output_video_African_rvfa_men, rvfa_African_men, count)
print(count)

count = 0
count = extract_audio(path_African_rvfa_women, output_audio_African_rvfa_women, output_mel_spectrogram_African_rvfa_women, output_video_African_rvfa_women, rvfa_African_women, count)
print(count)

count = 0
count = extract_audio(path_Asian_East_rvfa_men, output_audio_Asian_East_rvfa_men, output_mel_spectrogram_Asian_East_rvfa_men, output_video_Asian_East_rvfa_men, rvfa_Asian_East_men, count)
print(count)

count = 0
count = extract_audio(path_Asian_East_rvfa_women, output_audio_Asian_East_rvfa_women, output_mel_spectrogram_Asian_East_rvfa_women, output_video_Asian_East_rvfa_women, rvfa_Asian_East_women, count)
print(count)

count = 0
count = extract_audio(path_Asian_South_rvfa_men, output_audio_Asian_South_rvfa_men, output_mel_spectrogram_Asian_South_rvfa_men, output_video_Asian_South_rvfa_men, rvfa_Asian_South_men, count)
print(count)

count = 0
count = extract_audio(path_Asian_South_rvfa_women, output_audio_Asian_South_rvfa_women, output_mel_spectrogram_Asian_South_rvfa_women, output_video_Asian_South_rvfa_women, rvfa_Asian_South_women, count)
print(count)

count = 0
count = extract_audio(path_Caucasian_American_rvfa_men, output_audio_Caucasian_American_rvfa_men, output_mel_spectrogram_Caucasian_American_rvfa_men, output_video_Caucasian_American_rvfa_men, rvfa_Caucasian_American_men, count)
print(count)

count = 0
count = extract_audio(path_Caucasian_American_rvfa_women, output_audio_Caucasian_American_rvfa_women, output_mel_spectrogram_Caucasian_American_rvfa_women, output_video_Caucasian_American_rvfa_women, rvfa_Caucasian_American_women, count)
print(count)

count = 0
count = extract_audio(path_Caucasian_European_rvfa_men, output_audio_Caucasian_European_rvfa_men, output_mel_spectrogram_Caucasian_European_rvfa_men, output_video_Caucasian_European_rvfa_men, rvfa_Caucasian_European_men, count)
print(count)

count = 0
count = extract_audio(path_Caucasian_European_rvfa_women, output_audio_Caucasian_European_rvfa_women, output_mel_spectrogram_Caucasian_European_rvfa_women, output_video_Caucasian_European_rvfa_women, rvfa_Caucasian_European_women, count)
print(count)

"""## **Real Video - Real Audio**"""

count = 0
count = extract_audio(path_African_rvra_men, output_audio_African_rvra_men, output_mel_spectrogram_African_rvra_men, output_video_African_rvra_men, rvra_African_men, count)
print(count)

count = 0
count = extract_audio(path_African_rvra_women, output_audio_African_rvra_women, output_mel_spectrogram_African_rvra_women, output_video_African_rvra_women, rvra_African_women, count)
print(count)

count = 0
count = extract_audio(path_Asian_East_rvra_men, output_audio_Asian_East_rvra_men, output_mel_spectrogram_Asian_East_rvra_men, output_video_Asian_East_rvra_men, rvra_Asian_East_men, count)
print(count)

count = 0
count = extract_audio(path_Asian_East_rvra_women, output_audio_Asian_East_rvra_women, output_mel_spectrogram_Asian_East_rvra_women, output_video_Asian_East_rvra_women, rvra_Asian_East_women, count)
print(count)

count = 0
count = extract_audio(path_Asian_South_rvra_men, output_audio_Asian_South_rvra_men, output_mel_spectrogram_Asian_South_rvra_men, output_video_Asian_South_rvra_men, rvra_Asian_South_men, count)
print(count)

count = 0
count = extract_audio(path_Asian_South_rvra_women, output_audio_Asian_South_rvra_women, output_mel_spectrogram_Asian_South_rvra_women, output_video_Asian_South_rvra_women, rvra_Asian_South_women, count)
print(count)

count = 0
count = extract_audio(path_Caucasian_American_rvra_men, output_audio_Caucasian_American_rvra_men, output_mel_spectrogram_Caucasian_American_rvra_men, output_video_Caucasian_American_rvra_men, rvra_Caucasian_American_men, count)
print(count)

count = 0
count = extract_audio(path_Caucasian_American_rvra_women, output_audio_Caucasian_American_rvra_women, output_mel_spectrogram_Caucasian_American_rvra_women, output_video_Caucasian_American_rvra_women, rvra_Caucasian_American_women, count)
print(count)

count = 0
count = extract_audio(path_Caucasian_European_rvra_men, output_audio_Caucasian_European_rvra_men, output_mel_spectrogram_Caucasian_European_rvra_men, output_video_Caucasian_European_rvra_men, rvra_Caucasian_European_men, count)
print(count)

count = 0
count = extract_audio(path_Caucasian_European_rvra_women, output_audio_Caucasian_European_rvra_women, output_mel_spectrogram_Caucasian_European_rvra_women, output_video_Caucasian_European_rvra_women, rvra_Caucasian_European_women, count)
print(count)

"""## **Fake Video - Real Audio**"""

count = 0
count = extract_audio(path_African_fvra_men, output_audio_African_fvra_men, output_mel_spectrogram_African_fvra_men, output_video_African_fvra_men, fvra_African_men, count)
print(count)

count = 0
count = extract_audio(path_African_fvra_women, output_audio_African_fvra_women, output_mel_spectrogram_African_fvra_women, output_video_African_fvra_women, fvra_African_women, count)
print(count)

count = 0
count = extract_audio(path_Asian_East_fvra_men, output_audio_Asian_East_fvra_men, output_mel_spectrogram_Asian_East_fvra_men, output_video_Asian_East_fvra_men, fvra_Asian_East_men, count)
print(count)

count = 0
count = extract_audio(path_Asian_East_fvra_women, output_audio_Asian_East_fvra_women, output_mel_spectrogram_Asian_East_fvra_women, output_video_Asian_East_fvra_women, fvra_Asian_East_women, count)
print(count)

count = 0
count = extract_audio(path_Asian_South_fvra_men, output_audio_Asian_South_fvra_men, output_mel_spectrogram_Asian_South_fvra_men, output_video_Asian_South_fvra_men, fvra_Asian_South_men, count)
print(count)

count = 0
count = extract_audio(path_Asian_South_fvra_women, output_audio_Asian_South_fvra_women, output_mel_spectrogram_Asian_South_fvra_women, output_video_Asian_South_fvra_women, fvra_Asian_South_women, count)
print(count)

count = 0
count = extract_audio(path_Caucasian_American_fvra_men, output_audio_Caucasian_American_fvra_men, output_mel_spectrogram_Caucasian_American_fvra_men, output_video_Caucasian_American_fvra_men, fvra_Caucasian_American_men, count)
print(count)

count = 0
count = extract_audio(path_Caucasian_American_fvra_women, output_audio_Caucasian_American_fvra_women, output_mel_spectrogram_Caucasian_American_fvra_women, output_video_Caucasian_American_fvra_women, fvra_Caucasian_American_women, count)
print(count)

count = 0
count = extract_audio(path_Caucasian_European_fvra_men, output_audio_Caucasian_European_fvra_men, output_mel_spectrogram_Caucasian_European_fvra_men, output_video_Caucasian_European_fvra_men, fvra_Caucasian_European_men, count)
print(count)

count = 0
count = extract_audio(path_Caucasian_European_fvra_women, output_audio_Caucasian_European_fvra_women, output_mel_spectrogram_Caucasian_European_fvra_women, output_video_Caucasian_European_fvra_women, fvra_Caucasian_European_women, count)
print(count)

"""## **Splitting into Train and Test**"""

## Train-Test Audio Splitting

import os
import shutil
import random

def split_images(src, dest_train, dest_test, train_size=0.8):
    # Get the fake and real folders
    fake_folder = os.path.join(src, 'fake')
    real_folder = os.path.join(src, 'real')

    # Get the fake and real images
    fake_images = os.listdir(fake_folder)
    real_images = os.listdir(real_folder)

    random.shuffle(fake_images)
    random.shuffle(real_images)

    # Split the fake and real images into training and testing sets
    split_index_fake = int(len(fake_images) * train_size)
    split_index_real = int(len(real_images) * train_size)

    train_fake_images = fake_images[:split_index_fake]
    test_fake_images = fake_images[split_index_fake:]

    train_real_images = real_images[:split_index_real]
    test_real_images = real_images[split_index_real:]

    # Create the training and testing folders
    train_folder = os.path.join(src, dest_train)
    test_folder = os.path.join(src, dest_test)

    if not os.path.exists(train_folder):
        os.makedirs(train_folder)
    if not os.path.exists(test_folder):
        os.makedirs(test_folder)

    # Save a copy of the training and testing images in their respective folders
    train_fake_folder = os.path.join(train_folder, 'fake')
    train_real_folder = os.path.join(train_folder, 'real')

    test_fake_folder = os.path.join(test_folder, 'fake')
    test_real_folder = os.path.join(test_folder, 'real')

    if not os.path.exists(train_fake_folder):
        os.makedirs(train_fake_folder)
    if not os.path.exists(train_real_folder):
        os.makedirs(train_real_folder)

    if not os.path.exists(test_fake_folder):
        os.makedirs(test_fake_folder)
    if not os.path.exists(test_real_folder):
        os.makedirs(test_real_folder)

    for img in train_fake_images:
        shutil.copy(os.path.join(fake_folder, img), os.path.join(train_fake_folder, img))
    for img in test_fake_images:
        shutil.copy(os.path.join(fake_folder, img), os.path.join(test_fake_folder, img))

    for img in train_real_images:
        shutil.copy(os.path.join(real_folder, img), os.path.join(train_real_folder, img))
    for img in test_real_images:
        shutil.copy(os.path.join(real_folder, img), os.path.join(test_real_folder, img))

src_folder = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram"
train_dest_folder = "train"
test_dest_folder = "test"

split_images(src_folder, train_dest_folder, test_dest_folder)

# Move mel to real and fake folders

import os
import shutil

def move_mel(path, output_path):
    # Change the directory
    os.chdir(path)
    # iterate through all file
    for file in os.listdir():
        # Check whether file is in text format or not
        if file.endswith(".png"):
            mel_path = path + "/" + file
            output_mel_path = output_path + "/" + file
            print("path:", mel_path)
            print("output_mel_path:", output_mel_path)
            shutil.copy(mel_path, output_mel_path)
        elif file.endswith(".txt"):
            pass
        else:
          folder_path = f"{path}/{file}"
          move_video(folder_path, output_path)

output_path = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/fake"
path = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/fake_video-fake_audio"
move_mel(path, output_path)
path = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/real_video-fake_audio"
move_mel(path, output_path)

output_path = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/real"
path = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/fake_video-real_audio"
move_mel(path, output_path)
path = "/content/drive/Shareddrives/FYP/dataset/mel_spectrogram/real_video-real_audio"
move_mel(path, output_path)

# Move video to real and fake folders

import os
import shutil

def move_video(path, output_path):
    # Change the directory
    os.chdir(path)
    # iterate through all file
    for file in os.listdir():
        # Check whether file is in text format or not
        if file.endswith(".mp4"):
            video_path = path + "/" + file
            output_video_path = output_path + "/" + file
            print("path:", video_path)
            print("output_video_path:", output_video_path)
            shutil.copy(video_path, output_video_path)
        elif file.endswith(".txt"):
            pass
        else:
          folder_path = f"{path}/{file}"
          move_video(folder_path, output_path)

output_path = "/content/drive/Shareddrives/FYP/dataset/video/fake"
path = "/content/drive/Shareddrives/FYP/dataset/video/fake_video-fake_audio"
move_video(path, output_path)
path = "/content/drive/Shareddrives/FYP/dataset/video/fake_video-real_audio"
move_video(path, output_path)

output_path = "/content/drive/Shareddrives/FYP/dataset/video/real"
path = "/content/drive/Shareddrives/FYP/dataset/video/real_video-fake_audio"
move_video(path, output_path)
path = "/content/drive/Shareddrives/FYP/dataset/video/real_video-real_audio"
move_video(path, output_path)

# Move video to real and fake folders

import os
import shutil

# shutil.copy(video_file_path, output_video_path)
moved_videos = []

def move_video(path, output_path, real_or_fake, count):
    # Change the directory
    os.chdir(path)

    # iterate through all file
    for file in os.listdir():
        # Check whether file is in text format or not
        if file.endswith(".mp4"):

            # Define the output audio file path (e.g., 'output_audio.wav' or 'output_audio.mp3')
            video_id = file.split(".mp4")[0]
            output_video_path_1 = output_path + "/" + real_or_fake + "_" + f"{video_id}"
            if output_video_path_1 not in moved_videos:
                moved_videos.append(output_video_path_1)
                output_video_path = output_video_path_1 + "_" + str(count) + ".mp4"

                # Write the extracted video to a file
                shutil.move(file, output_video_path)

                print("\nMoving", file, "to", output_video_path)

                count += 1
        elif file.endswith(".txt"):
            pass
        else:
          folder_path = f"{path}/{file}"
          count = move_video(folder_path, output_path, real_or_fake, count)
    return count

# Folder Path
path_fvfa = "/content/drive/MyDrive/FakeAVCeleb_v1.2/FakeAVCeleb_v1.2/FakeVideo-FakeAudio"
path_rvfa = "/content/drive/MyDrive/FakeAVCeleb_v1.2/FakeAVCeleb_v1.2/RealVideo-FakeAudio"
path_rvra = "/content/drive/MyDrive/FakeAVCeleb_v1.2/FakeAVCeleb_v1.2/RealVideo-RealAudio"
path_fvra = "/content/drive/MyDrive/FakeAVCeleb_v1.2/FakeAVCeleb_v1.2/FakeVideo-RealAudio"

output_path_fake = "/content/drive/Shareddrives/FYP/video_dataset/fake"
output_path_real = "/content/drive/Shareddrives/FYP/video_dataset/real"

fvfa = "FakeVideo-FakeAudio"
rvfa = "RealVideo-FakeAudio"
rvra = "RealVideo-RealAudio"
fvra = "FakeVideo-RealAudio"

count = 0
count1 = move_video(path_fvfa, output_path_fake, fvfa, count)
# print("count:", count)
count2 = move_video(path_fvra, output_path_fake, fvra, count1)
# print("count:", count)
count = 0
count3 = move_video(path_rvfa, output_path_real, rvfa, count)
# print("count:", count)
count4 = move_video(path_rvra, output_path_real, rvra, count3)
# print("count:", count)

## Train-Test Splitting for Video

import os
import shutil
import random

def split_videos(src, dest_train, dest_test, train_size=0.8):
    # Get the fake and real folders
    fake_folder = os.path.join(src, 'fake')
    print("fake_folder:", fake_folder)
    # real_folder = os.path.join(src, 'real')

    # Get the fake and real videos
    fake_videos = os.listdir(fake_folder)
    print("fake_videos:", fake_videos)
    # real_videos = os.listdir(real_folder)

    # Split the fake and real videos into training and testing sets
    split_index_fake = int(len(fake_videos) * train_size)
    print("split_index_fake:", split_index_fake)
    # split_index_real = int(len(real_videos) * train_size)

    train_fake_videos = fake_videos[:split_index_fake]
    test_fake_videos = fake_videos[split_index_fake:]

    # train_real_videos = real_videos[:split_index_real]
    # test_real_videos = real_videos[split_index_real:]

    # Create the training and testing folders
    train_folder = os.path.join(src, dest_train)
    print("train_folder:", train_folder)
    test_folder = os.path.join(src, dest_test)
    print("test_folder:", test_folder)

    if not os.path.exists(train_folder):
        os.makedirs(train_folder)
    if not os.path.exists(test_folder):
        os.makedirs(test_folder)

    # Save a copy of the training and testing videos in their respective folders
    train_fake_folder = os.path.join(train_folder, 'fake')
    print("train_fake_folder:", train_fake_folder)
    # train_real_folder = os.path.join(train_folder, 'real')

    test_fake_folder = os.path.join(test_folder, 'fake')
    print("test_fake_folder:", test_fake_folder)
    # test_real_folder = os.path.join(test_folder, 'real')

    if not os.path.exists(train_fake_folder):
        os.makedirs(train_fake_folder)
    # if not os.path.exists(train_real_folder):
    #     os.makedirs(train_real_folder)

    if not os.path.exists(test_fake_folder):
        os.makedirs(test_fake_folder)
    # if not os.path.exists(test_real_folder):
    #     os.makedirs(test_real_folder)

    for video in train_fake_videos:
        shutil.copy(os.path.join(fake_folder, video), os.path.join(train_fake_folder, video))
    for video in test_fake_videos:
        shutil.copy(os.path.join(fake_folder, video), os.path.join(test_fake_folder, video))

    # for img in train_real_videos:
    #     shutil.copy(os.path.join(real_folder, img), os.path.join(train_real_folder, img))
    # for img in test_real_videos:
    #     shutil.copy(os.path.join(real_folder, img), os.path.join(test_real_folder, img))

train_dest_folder = "train"
test_dest_folder = "test"

src_folder_fake = "/content/drive/Shareddrives/FYP/video_dataset"
split_videos(src_folder_fake, train_dest_folder, test_dest_folder)

import cv2
import os
import numpy as np

# Function to perform video augmentation
def augment_video(video_path, output_folder, augmentation_function, function_name):
    # Read the video
    cap = cv2.VideoCapture(video_path)

    # Get video properties
    frame_width = int(cap.get(3))
    frame_height = int(cap.get(4))
    fps = cap.get(5)

    # Create VideoWriter object to save augmented video
    output_path = os.path.join(output_folder, f"{function_name}_augmented_{os.path.basename(video_path)}")
    out = cv2.VideoWriter(output_path, cv2.VideoWriter_fourcc(*'mp4v'), fps, (frame_width, frame_height))

    # Process each frame
    while True:
        ret, frame = cap.read()
        if not ret:
            break

        # Apply the augmentation function
        augmented_frame = augmentation_function(frame)

        augmented_frame = augmented_frame.astype(np.uint8)

        # Write the augmented frame to the output video
        out.write(augmented_frame)

    # Release the VideoCapture and VideoWriter objects
    cap.release()
    out.release()

# Augmentation functions
def horizontal_flip(frame):
    return cv2.flip(frame, 1)

def vertical_flip(frame):
    return cv2.flip(frame, 0)

def translate(frame, dx=20, dy=20):
    rows, cols, _ = frame.shape
    M = np.float32([[1, 0, dx], [0, 1, dy]])
    return cv2.warpAffine(frame, M, (cols, rows))

def sharpen(frame):
    kernel = np.array([[-1, -1, -1], [-1, 9, -1], [-1, -1, -1]])
    return cv2.filter2D(frame, -1, kernel)

# def elastic_deformation(frame, alpha=200, sigma=10):
#     random_state = np.random.RandomState(None)
#     shape = frame.shape
#     dx = cv2.GaussianBlur(alpha * (random_state.rand(*shape) * 2 - 1).astype(np.float32), (sigma, sigma), 0)
#     dy = alpha * cv2.GaussianBlur((random_state.rand(*shape) * 2 - 1).astype(np.float32), (sigma, sigma), 0)
#     x, y, _ = np.meshgrid(np.arange(shape[1]), np.arange(shape[0]), np.arange(shape[2]))
#     indices = np.reshape(y+dy, (-1, 1)), np.reshape(x+dx, (-1, 1)), np.reshape(np.zeros_like(x), (-1, 1))
#     distored_image = cv2.remap(frame, indices[1].astype('float32'), indices[0].astype('float32'), interpolation=cv2.INTER_LINEAR, borderMode=cv2.BORDER_CONSTANT, borderValue=0)
#     return distored_image.reshape(frame.shape)

def dropout(frame, p=0.1):
    mask = np.random.choice([0, 1], size=frame.shape[:2], p=[p, 1-p])
    return frame * mask[:, :, np.newaxis]

def gamma_correction(frame, gamma=1.5):
    return np.clip(frame**gamma, 0, 255).astype(np.uint8)

def gaussian_blur(frame, kernel_size=5):
    # Ensure kernel size is odd
    kernel_size = max(1, kernel_size) if kernel_size % 2 == 1 else max(1, kernel_size - 1)
    return cv2.GaussianBlur(frame, (kernel_size, kernel_size), 0)


def average_blur(frame, kernel_size=5):
    return cv2.blur(frame, (kernel_size, kernel_size))

def bilateral_blur(frame, d=9, sigma_color=75, sigma_space=75):
    return cv2.bilateralFilter(frame, d, sigma_color, sigma_space)

def median_blur(frame, kernel_size=5):
    return cv2.medianBlur(frame, kernel_size)

def gaussian_noise(frame, mean=0, sigma=25):
    noise = np.random.normal(mean, sigma, frame.shape)
    return np.clip(frame + noise, 0, 255).astype(np.uint8)

def salt_and_pepper_noise(frame, salt_prob=0.01, pepper_prob=0.01):
    noisy_frame = frame.copy()
    total_pixels = frame.size
    num_salt = np.ceil(salt_prob * total_pixels)
    coords = [np.random.randint(0, i-1, int(num_salt)) for i in frame.shape]
    noisy_frame[coords[0], coords[1], :] = 1

    num_pepper = np.ceil(pepper_prob * total_pixels)
    coords = [np.random.randint(0, i-1, int(num_pepper)) for i in frame.shape]
    noisy_frame[coords[0], coords[1], :] = 0
    return noisy_frame

def raise_channel(frame, channel, factor=1.5):
    frame[:, :, channel] = np.clip(frame[:, :, channel] * factor, 0, 255)
    return frame

def raise_blue_channel(frame, factor=1.5):
    return raise_channel(frame, 0, factor)

def raise_green_channel(frame, factor=1.5):
    return raise_channel(frame, 1, factor)

def raise_red_channel(frame, factor=1.5):
    return raise_channel(frame, 2, factor)

def raise_hue(frame, factor=1.5):
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    hsv[:, :, 0] = np.clip(hsv[:, :, 0] * factor, 0, 255)
    return cv2.cvtColor(hsv, cv2.COLOR_HSV2BGR)

def raise_intensity(frame, factor=1.5):
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    hsv[:, :, 2] = np.clip(hsv[:, :, 2] * factor, 0, 255)
    return cv2.cvtColor(hsv, cv2.COLOR_HSV2BGR)

def raise_saturation(frame, factor=1.5):
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    hsv[:, :, 1] = np.clip(hsv[:, :, 1] * factor, 0, 255)
    return cv2.cvtColor(hsv, cv2.COLOR_HSV2BGR)

# Example usage
input_folder = "/content/drive/MyDrive/videoaugdummy/fol1"
output_folder = "/content/drive/MyDrive/videoaugdummy/fol2"

# Ensure the output folder exists
os.makedirs(output_folder, exist_ok=True)

# List all video files in the input folder
video_files = [f for f in os.listdir(input_folder) if f.endswith('.mp4')]

# Augmentation functions and their corresponding names
augmentation_functions = [
    (horizontal_flip, "horizontal_flip"),
    (vertical_flip, "vertical_flip"),
    (translate, "translate"),
    (sharpen, "sharpen"),
    #(elastic_deformation, "elastic_deformation"),
    (dropout, "dropout"),
    (gamma_correction, "gamma_correction"),
    (gaussian_blur, "gaussian_blur"),
    (average_blur, "average_blur"),
    (bilateral_blur, "bilateral_blur"),
    (median_blur, "median_blur"),
    (gaussian_noise, "gaussian_noise"),
    (salt_and_pepper_noise, "salt_and_pepper_noise"),
    (raise_blue_channel, "raise_blue_channel"),
    (raise_green_channel, "raise_green_channel"),
    (raise_red_channel, "raise_red_channel"),
    (raise_hue, "raise_hue"),
    (raise_intensity, "raise_intensity"),
    (raise_saturation, "raise_saturation")
]

# Apply augmentation for each video and each augmentation function
for video_file in video_files:
    video_path = os.path.join(input_folder, video_file)

    for augmentation_function, function_name in augmentation_functions:
        augment_video(video_path, output_folder, augmentation_function, function_name)

print("Video augmentation completed.")